---

# Default compose file for development and production.
# Should be used directly in development.
# Automatically loads `docker-compose.override.yml` if it exists.
# No extra steps required.
# Should be used together with `docker/docker-compose.prod.yml`
# in production.

version: "3.6"
services:
  db:
    image: "postgres:15-alpine"
    restart: unless-stopped
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - webnet
    env_file: ./config/.env
    ports:
      - "5432:5432"
    healthcheck:
        test: pg_isready -U postgres
        interval: 10s
        timeout: 5s
        retries: 5
        start_period: 30s

  frontend:
    image: afaneor/summer-invest-front:latest
    ports:
      - "3000:3000"

  web:
    <<: &web
      # Image name is changed in production:
      image: afaneor/summer-invest-backend:latest
#      build:
#        target: development_build
#        context: .
#        dockerfile: ./docker/django/Dockerfile
#        args:
#          DJANGO_ENV: development
#          NOVA_BUILD_ID: "${CI_PIPELINE_IID:-No CI}"
#          NOVA_RELEASE: "${CI_COMMIT_TAG:-No release image}"
#          NOVA_PIPELINE_URL: "${CI_PIPELINE_URL:-No CI}"

      volumes:
        - django-static:/var/www/django/static
      depends_on:
        - db
      networks:
        - webnet
      env_file: ./config/.env
      environment:
        DJANGO_DATABASE_HOST: db

    command: python -Wd manage.py runserver 0.0.0.0:8000
    healthcheck:
      # We use `$$` here because:
      # one `$` goes to shell,
      # one `$` goes to `docker-compose.yml` escaping
      test: |
        /usr/bin/test $$(
          /usr/bin/curl --fail http://localhost:8000/health/?format=json
          --write-out "%{http_code}" --silent --output /dev/null
        ) -eq 200
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    ports:
      - "8000:8000"

  ollama:
    image: ollama/ollama
    volumes:
      - ollama:/root/.ollama
    ports:
      - "11434:11434"
    networks:
      - webnet

  # Celery worker
  celery:
    <<: *web
    command: celery -A server.celery worker -l info
#
#  # Celery Beat
  beat:
    <<: *web
    command: celery -A server.celery beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  rabbitmq:
    image: "rabbitmq:3.8-management"
    networks:
      - webnet

  gotenberg:
    image: thecodingmachine/gotenberg:6
    networks:
      - webnet


networks:
  # Network for your internals, use it by default:
  webnet:

volumes:
  pgdata:
  django-static:
  ollama:
